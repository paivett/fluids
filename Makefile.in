################################################################################
# Makefile for SPH-Qt project                                                  #
#                                                                              #
# Description:  Finds all sources, compiles them, creates dependencies         #
# files, and links everything. If a dependency has changed, or is              #
# missing, the object is recompiled. It also generates MOC files               #
#                                                                              #
# Author: santiago.pivetta@gmail.com                                           #
#                                                                              #
# Version: 2.1                                                                 #
#                                                                              #
################################################################################

#Main target, name of executable
BIN := sph

#Bullets physics installation path
BT_INSTALL_PATH = @BT_INSTALL_PATH@

#Qt installation path
QT_INSTALL_PATH = @QT_INSTALL_PATH@

#QT MOC compiler
MOC_CC := $(QT_INSTALL_PATH)/bin/moc

#Root directory where to find all sources
ROOT_SRC_DIR := .

#Root directory where to put all compiled objects
ROOT_OBJ_DIR := .obj

#Root directory where to put all moc files
ROOT_MOC_DIR := .moc

#Configure include dirs
QT_INC_DIR = $(QT_INSTALL_PATH)/include
QT_MODULES = QtGui QtCore QtWidgets QtOpenGL
CL_INC_DIR = @CL_INCLUDE_PATH@
BT_INC_DIR = $(BT_INSTALL_PATH)/src/
INC_DIRS := . $(BT_INC_DIR) $(QT_INC_DIR) $(addprefix $(QT_INC_DIR)/,$(QT_MODULES)) $(CL_INC_DIR) $(ROOT_SRC_DIR)/external

#Configure where to put the build.
BUILD_DIR :=

#Default c++ compiler flags that are always used. Additional flags can be sent
#through CXXFLAGS
DEFAULT_CXXFLAGS = -Wall -fPIC -std=c++14 -g

#Define here the dynamic libraries to be linked
LIBS := Qt5OpenGL Qt5Widgets Qt5Gui Qt5Core GL pthread OpenCL clogs stdc++ m

#Define here the dynamic libraries to be linked
BT_STATIC_LIBS := $(addprefix $(BT_INSTALL_PATH)/bin/, libBulletDynamics_gmake_x64_release.a libBulletCollision_gmake_x64_release.a libLinearMath_gmake_x64_release.a)
STATIC_LIBS := $(BT_STATIC_LIBS)

###################################################################################

#Targets and needed files definition
#Find all cpp's inside source root
SRCS := $(shell find $(ROOT_SRC_DIR) -name "*.cpp")
#Exclude tests
SRCS := $(filter-out $(ROOT_SRC_DIR)/test/%,$(SRCS))

#Exclude CPU implementation for now
SRCS := $(filter-out $(ROOT_SRC_DIR)/fluid/simulation/cpu/%,$(SRCS))

#Find all h's inside source root
HDRS := $(shell find $(ROOT_SRC_DIR) -name "*.h")
#MOC files will be named with the same name as headers, but put inside obj root dir
MOCS := $(filter $(ROOT_SRC_DIR)/gui/%,$(HDRS:.h=.moc.cpp))
MOCS := $(patsubst $(ROOT_SRC_DIR)%, $(ROOT_MOC_DIR)%,$(MOCS))
#Object files will be named with the same name as sources, but put inside obj root dir
OBJS := $(patsubst $(ROOT_SRC_DIR)%, $(ROOT_OBJ_DIR)%, $(SRCS:.cpp=.o))
MOC_OBJS := $(patsubst $(ROOT_MOC_DIR)%, $(ROOT_OBJ_DIR)%, $(MOCS:.moc.cpp=.moc.o))
#Dependecies files
DEPS := $(OBJS:.o=.o.d)

#Directories (the sort is used to remove duplicates)
SRC_DIRS := $(sort $(dir $(SRCS)))
OBJ_DIRS := $(patsubst $(ROOT_SRC_DIR)%, $(ROOT_OBJ_DIR)%, $(SRC_DIRS))
MOC_DIRS := $(patsubst $(ROOT_SRC_DIR)%, $(ROOT_MOC_DIR)%, $(SRC_DIRS))

#Compiler flags: include the default flags, user flags and also the
#include dirs flags
INC_DIR_FLAGS := $(addprefix -I, $(INC_DIRS))
FULL_CXXFLAGS := $(DEFAULT_CXXFLAGS) $(CXXFLAGS) $(INC_DIR_FLAGS)

#Linker flags
LDFLAGS := -L$(QT_INSTALL_PATH)/lib -Wl,-rpath,$(QT_INSTALL_PATH) -Wl,-rpath,$(QT_INSTALL_PATH)/lib
LDLIBS := $(addprefix -l, $(LIBS))

BUILD_TARGET := $(BUILD_DIR)$(BIN)

DIRS := $(BUILD_DIR) $(OBJ_DIRS) $(MOC_DIRS)

#Now from here, the rules

.PHONY: all

all: $(BUILD_TARGET)

$(BUILD_TARGET): $(DIRS) $(OBJS) $(MOC_OBJS)
	$(CC) $(OBJS) $(MOC_OBJS) $(STATIC_LIBS) $(LDFLAGS) $(LDLIBS) -o $(BUILD_TARGET)

#Include all dependencies generated by compiler
-include $(DEPS)

$(ROOT_OBJ_DIR)/%.o: $(ROOT_SRC_DIR)/%.cpp
	$(CXX) $(FULL_CXXFLAGS) -c $< -o $@
	@$(CXX) -MM $(FULL_CXXFLAGS) $< > $@.d
	@mv -f $@.d $@.d.tmp
	@sed -e 's|.*:|$@:|' < $@.d.tmp > $@.d
	@sed -e 's/.*://' -e 's/\\$$//' < $@.d.tmp | fmt -1 | \
	  sed -e 's/^ *//' -e 's/$$/:/' >> $@.d
	@rm -f $@.d.tmp

$(ROOT_OBJ_DIR)/%.moc.o: $(ROOT_MOC_DIR)/%.moc.cpp
	$(CXX) $(FULL_CXXFLAGS) -c $< -o $@

$(ROOT_MOC_DIR)/%.moc.cpp: $(ROOT_SRC_DIR)/%.h
	$(MOC_CC) $(INC_DIR_FLAGS) $< -o $@

$(DIRS):
	@mkdir -p $@

clean:
	$(RM) $(OBJS) $(DEPS)
	$(RM) $(DIRS) -r

# For debug only: make print-VAR will print VAR on the console
print-%:
	@echo '$*=$($*)'
